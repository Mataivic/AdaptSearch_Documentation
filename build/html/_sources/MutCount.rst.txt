********
MutCount
********


Overview
========

Separated mode
--------------

This mode counts occurrences of amino-acids or nucleic acids, according to the sequences type, in each distinct orthogroup. Then, two subgroups of species are set by the user :
 #. A first group, constitued by species having something in common (an ecological trait, an ecological niche, a particular environmental adaptation)
 #. A second group, constitued by species sharing the opposite trait (for example, the user can have a first subgroup made with species adapted to high temperatures and a second group made with species adapted to cold temperatures)

Within the groups, the program checks wether the occurrences of each element (amino-acid, nucleic acid, thermostability indice, GC content ...) is higher of lower between one species and all the species of the opposite group. Binomial tests are then performed of these counts.

Concatenated mode
-----------------

This script counts the number of codons, amino acids, and types of amino acids in sequences, as well as the mutation bias from one item to another between 2 sequences. Counting is then compared to empirical p-values, obtained from bootstrapped sequences obtained from a subset of sequences.

In the output files, the pvalues indicate the position of the observed data in a distribution of empirical countings obtained from a resample of the data. Values above 0.95 indicate a significantly higher counting, values under 0.05 a significantly lower counting.

The script resamples random pairs of aligned codon to determine what countings can be expected under the hypothesis of an homogenous dataset. Countings are performed on each generated random alignement, thousands of alignments allow to draw a gaussian distribution of the countings. Then the script simply checks whether the observed data are within the 5% lowest or 5% highest values of the distribution.

User parameters
===============

Separated mode
--------------

 #. Sequences type has to be specified : 'nucleic' or 'proteic'
 #. Inputs are all fasta files from `CDS_Search <CDS_Search.html>`_ read from a fixed named directory of inputs
 #. List of all species : the user has to specifiy all the species which can be found in the set of orthogroups (comma-separated abbreviated names, ex Ac,Ap,Ps,Pp,Pf,Am,Pg)
 #. Species for group one : set the list of species of group one (comma-separated abbreviated names, ex Ap,Ps)
 #. Species for group two : set the list of species of group two (comma-separated abbreviated names, ex Pg,Pp)

Concatenated mode
-----------------

 #. Input fasta file is the 'Phylogeny_concatenation_fasta_nuc' from `ConcatPhyl <ConcatPhyl.html>`_
 #. List of species for countings : the user can focus countings on these species only
 #. List of species used for resampling : the user can focus the resampling on these species only
 #. Number of sampled codons : sets the length (in codons) of the resampled sequences
 #. Number of iterations : sets the number of resampled sequences


Code documentation
==================

Algorithm
---------

Separated mode
^^^^^^^^^^^^^^

 #. A first script proceed to count the occurrence of each element (nucleotide or amino-acid) in each orthogroup, then of each indice (GC and purine content, IVYWREL, VLIM, hydratation ...). Results are stored in nested dictionaries (keys : files_names, sub-keys : species names, sub-sub-keys : elements and indices names). Missing species in a group are set with dictionaries full of 'NaN' values. One cs file is written per element/indice.
 #. A second script prepare tables for binomial test by counting the number of successes and failures between the two subgroups of species (e.g the number of times a value of A is higher (and lower) than a value of B).
 #. A species is compared to the whole group of opposite species -> the maximum and minimum values of 'A' observed into the opposite group are taken into account for the comparisons
 #. A third R script loops on these tables to do binomial tests. The number of successes is, for instance, the number of times the value of 'A' has been higher than the value of 'B', and the number of trials is the number of times 'A' > 'B' + the number of times 'A' < 'B'

 .. note:: This is not how a binomial test is supposed to work. The number of trials should be the total number of comparisons ('A' > 'B' + 'A'<'B' + 'A'='B'). Is it done on purpose ?

Concatenated mode
^^^^^^^^^^^^^^^^^

A whole bunch of dictionaries are used to store, for each sequences/pairs of sequences :
 #. Each codons/amino-acids/amino-acids types occurrences countings/frequences (3*2=6 dictionaries)
 #. Each codons/amino-acids/amino-acids types transitions countings/frequences (3*2=6 dictionaries)

.. code-block:: python

   # Example
   codons_counts_species_X = {'aaa':0, 'aac':0, ...}
   codons_transitions_counts_species_X_to_species_Y = {'aaa':{'aaa':0, 'aac':0, ...}, 
                                                       'aac':{'aaa':0, 'aac':0, ...}, 
                                                       ...}

Resampling is done on all or on a subset of sequences by picking codons at random positions (which are positions where all the resampled sequences have a full codon). 


Then, Final dictionaries gathers all occurrences and transitions of all sequences, which are written to csv files using pandas.

.. code-block:: python

   # Example
   codons_counts_final = {'Species1': {'aaa':20, 'aac':12, ...},
                          'Species2': {'aaa':14, 'aac':17, ...},
                          ...}
   codons__transitions_counts_final = {'species_X_to_species_Y': {'aaa':{'aaa':12, 'aac':1, ...},
                                                                  'aac':{'aaa':2, 'aac':15, ...},
                                                                  ...}
                                       'species_X_to_species_Z': {'aaa':{'aaa':8, 'aac':2, ...},
                                                                  'aac':{'aaa':3, 'aac':10, ...},
                                                                  ...}
                                       ...}

Various values (IVRYWEL, EKQH, PAYRESDGM, GC12 ...) are stored in int/float variables, put in a list (one per species) and then also written in csv file.

Source code
-----------

Separated mode
^^^^^^^^^^^^^^

File: S01b_extract_variable_nuc.py
""""""""""""""""""""""""""""""""""

Counts occurrences of nucleic acids and computes corresponding indices (GC content, purine content ...). Called when the sequences are in nucleic format.

.. py:function:: all_nuc_counts(seq)

   :param seq: a nucleic sequence
   :type seq: String
   :return: counts of each nucleotide
   :rtype: dict

.. py:function:: ratios(nuc_counts)

   :param nuc_counts: counts of nucleotides in a sequence (computed by all_nuc_counts())
   :type nuc_counts: dict
   :return: values of various nucleic indices and ratios (GC%, purine% ...)
   :rtype: dict

For each element (A,C,G,T in a first directory, and each indice in a second directory), there is an output csv file. Rows are fasta files and columns are species. Missing species in a group have NaN values.

File: S01b_extract_variable_prot.py
"""""""""""""""""""""""""""""""""""

Counts occurrences of amino acids and computes corresponding indices (IVYRWEL, ratio EQ_KQ ...). Called when the sequences are in proteic format.

.. py:function:: all_aa_counts(seq)

   :param seq: a proteic sequence
   :type seq: String
   :return: counts of each amino-acid
   :rtype: dict

.. py:function:: all_aa_props(seq_counts)

   :param seq_counts: counts of amino-acids in a sequence (computed by all_aa_counts())
   :type seq_counts: dict
   :return: proportion of each amino-acid in the sequence
   :rtype: dict

This function is called but is curently excluded from the final results.

.. py:function:: aa_variables_counts_and_props(aa_counts)

   :param aa_counts: counts of amino-acids in a sequence (computed by all_aa_counts())
   :type aa_counts: dict
   :returns: 2 variables : counts and proportions of various indices and ratios
   :rtype: dict

.. py:function:: aa_properties(amino_acids_properties_file)

   :param amino_acids_properties_file: a file which comes along with the scripts, storing various amino-acids properties
   :type amino_acids_properties_file: String
   :return: the content of the file, each amino-acid properties being a list (frequencies, weight, volume, partial_specific_volume, hydratation)
   :rtype: dict

.. py:function:: sequence_properties_from_aa_properties(aa_counts, aa_properties)

   :param aa_counts: counts of amino-acids in a sequence (computed by all_aa_counts())
   :type aa_counts: dict
   :param aa_properties: amino-acids properties returned by the call of aa_properties()
   :type aa_properties: dict

For each element (each amino-acid in a first directory, and each indice in a second directory), there is an output csv file. Rows are fasta files and columns are species. Missing species in a group have NaN values.

File: S02b_extreme_2states.py
"""""""""""""""""""""""""""""

Proceeds to count, for each element/indice and each comparison *species A from group 1* VS. *all species from group 2*, the number of times A > B and A < B. The script handles both sequences format (nucleic and proteic).

.. py:function:: loop_on_elems(list_of_elems, path_in, path_out, sps_group_1, sps_group_2, colnames)

   :param list_of_elems: the lsit of counted elements names, which corresponds to dictionaries keys
   :type list_of_elems: list
   :param path_in: The name of the input directory
   :type path_in: String
   :param path_out: The name of the output directory
   :type path_out: String
   :param sps_group_1: Species names (abbreviated) belonging to group 1
   :type sps_group_1: list
   :param sps_group_2: Species names (abbreviated) belonging to group 2
   :type sps_group_2: list
   :param colnames: contains automaticcaly formatted names for the table columns (one per comparison)
   :type colnames: dict

This is the main function, which loops on every counts file, make pandas dataframe which are then written in csv files. It calls the sub-routine tableu().

.. py:function:: tableu(fileu, sps_group_1, sps_group_2)

   :param fileu: contains the counts of an element computed by the previous script
   :type fileu: pandas DataFrame
   :param sps_group_1: Same parameter than into the function loop_on_elems()
   :type sps_group_1: list
   :param sps_group_2: Same parameter than into the function loop_on_elems()
   :type sps_group_2: list

This function parse the pandas DataFrame obtained after reading the input counts file and proceeds to count the number of successes for A<B and A>B

At the end of this second script, a R script (S03b_sign_test_binomial.R) is called twice (on elements counts and on indices counts) and run binomial tests.

Concatenated mode
^^^^^^^^^^^^^^^^^

.. py:function:: buildDicts(list_codons, content, dict_genetic_code, dict_aa_classif)

   :param list_codons: all codons except stop-codons
   :type list_codons: list
   :param content: specifies the keys type 
   :type content: int (for countings) or list (for resampling)
   :param dict_genetic_code: Describe the genetic code (key : amino-acid, values : list of codons)
   :type dict_genetic_code: dict
   :param dict_aa_classif: Describe the amino-acids classification (key : amino-acid type, values : list of amino-acids)
   :type dict_aa_classif: dict
   :return: 6 dictionaries used for countings and frequencies storage on a species or resampling
   :rtype: dict

At each species or pair of species countings, a copy of the input dictionaries is done, and dictionaries for transitions are also built. 

.. py:function:: viable(seqs, pos, method)

   :param seqs: sequences, which must all have the same size
   :type seqs: list
   :param pos: positions, <= len(seqs) -3
   :type pos: int
   :param method: "all" or "any"
   :type method: string
   :return: if the given position is viable in all the sequence
   :rtype: bool

Compute if, among a set of sequences, either at least one of the codons at the specified position has not a "-", or not any codon has a "-"

.. py:function:: computeAllCountingsAndFreqs(seq, list_codons, init_dict_codons, init_dict_aa, init_dict_classif, dict_genetic_code, dict_aa_classif)

   :param seq: a dna/rna sequence (a,t,c,g)
   :type seq: string
   :param list_codons: all codons except stop-codons
   :type list_codons: list
   :param init_dict_codons: a copied output of `buildDicts()`
   :type init_dict_codons: dict
   :param init_dict_aa: a copied output of `buildDicts()`
   :type init_dict_aa: dict
   :param init_dict_classif: a copied output of `buildDicts()`
   :type init_dict_classif: dict
   :param dict_genetic_code: Describe the genetic code (key : amino-acid, values : list of codons)
   :type dict_genetic_code: dict
   :param dict_aa_classif: Describe the amino-acids classification (key : amino-acid type, values : list of amino-acids)
   :type dict_aa_classif: dict
   :returns: 6 variables : countings and frequencies of codons, amino-acid and amino-acid types
   :rtype: dict

Call all functions dedicated to the computation of occurences and frequencies of codons, amino-acids, amino-acids types

.. py:function:: computeVarious(seq, dict_aa_counts, dict_aa_types)

   :param seq: a dna/rna sequence (a,t,c,g)
   :type seq: string
   :param dict_aa_counts: the countings of amino-acids on the param `seq`
   :type dict_aa_counts: dict
   :param dict_aa_types: the countings of amino-acids types on the param `seq`
   :type dict_aa_types: dict
   :returns: GC3, GC12, IVYWREL, EKQH, PAYRESDGM, purineload, CvP values for `seq`
   :rtype: int and floats

Call al the functions for nucleic and amino-acids sequences description : *GC3, GC12, IVYWREL, EKQH, PAYRESDGM, purineload, CvP*

.. py:function:: computeAllBiases(seq1, seq2, dico_codons_transi, dico_aa_transi, dico_aatypes_transi, reversecode, reverseclassif)

   :param seq1: a dna/rna sequence (a,t,c,g)
   :type seq1: string
   :param seq2: a dna/rna sequence (a,t,c,g)
   :type seq2: string
   :param dico_codons_transi: a copied output of `buildDicts()`
   :type dico_codons_transi: dict of dicts
   :param dico_aa_transi: a copied output of `buildDicts()`
   :type dico_aa_transi: dict of dicts
   :param dico_aatypes_transi: a copied output of `buildDicts()`
   :type dico_aatypes_transi: dict of dicts
   :param reversecode: the genetic_code, but reversed (key : codon, values : amino-acid)
   :type reversecode: dict
   :param reverseclassif: the amino-acids classification, but reversed (key : amino-acid, values : amino-acid type)
   :type reverseclassif: dict
   :returns: countings and frequencies of codons, amino-acid and amino-acid types transitions from `seq1` to `seq2`
   :rtype: dict of dicts

Compute all biases (transisitions codon->codon, aa->-aa, aa_type->aa_type) between two sequences 

.. py:function:: sampling (dict_seq, nb_iter, len_sample, list_codons, genetic_code, aa_classif, reversecode, reverseclassif)

   :param dict_seq: contains the species name (keys) and sequences (values) used
   :type dict_seq: dict
   :param nb_iter: the number of iterations
   :type nb_iter: int
   :param len_sample: the lenght (in codons) of each resampled sequence
   :type len_sample: int
   :param list_codons: all codons except stop-codons
   :type list_codons: list
   :param genetic_code: Describe the genetic code (key : amino-acid, values : list of codons)
   :type genetic_code: dict
   :param aa_classif: Describe the amino-acids classification (key : amino-acid type, values : list of amino-acids)
   :type aa_classif: dict
   :param reversecode: the genetic_code, but reversed (key : codon, values : amino-acid)
   :type reversecode: dict
   :param reverseclassif: the amino-acids classification, but reversed (key : amino-acid, values : amino-acid type)
   :type reverseclassif: dict
   :returns: 6 variables
   :rtype: dict and dict of dicts

Resample randomly codons from sequences (sort of bootsrap)

.. py:function:: testPvalues(dict_counts, dict_resampling, nb_iter)

   :param dict_counts: contains codons frequencies of a sequence, an output of `computeAllCountingsAndFreqs()`
   :type dict_counts: dict
   :param dict_resampling:
   :type dict_resampling: dict
   :param nb_iter: the number of iterrations used for resampling
   :type nb_iter: int
   :return: pvalues for each item (codon, amino-acid, amino-acid type countings or transitions)
   :rtype: dict

Computes where the observed value is located in the expected counting distribution


Back to `main page <index.html>`_.